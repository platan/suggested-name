!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("suggested-name",[],e):"object"==typeof exports?exports["suggested-name"]=e():t["suggested-name"]=e()}("undefined"!=typeof self?self:this,(function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";function r(t){return function(t){if(Array.isArray(t))return o(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return o(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return o(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function u(t){var e=Math.floor(t.length/2);return t.sort((function(t,e){return t-e})),t.length%2?t[e]:(t[e-1]+t[e])/2}function i(t){return t.sort((function(e,n){return t.filter((function(t){return t===e})).length-t.filter((function(t){return t===n})).length})).pop()}function f(t,e,n){var r=t.has(e)?t.get(e).concat(n):[n];t.set(e,r)}function c(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=new Map,o=new Map;e.forEach((function(e){t=t.map((function(t){return t.replace(e,"")}))})),t.map((function(t){return t.replace(/ {2,}/g," ")})).forEach((function(t){r(new Set(t.split(" "))).forEach((function(t,e){var r=t.toLowerCase();f(n,r,e+1),f(o,r,t)}))}));var c=r(n.entries()).filter((function(e){return o.get(e[0].toLowerCase()).length===t.length})).map((function(t){return[t[0],u(t[1])]})).sort((function(t,e){return t[1]-e[1]})).map((function(t){return i(o.get(t[0]))}));return c.join(" ")}n.r(e),n.d(e,"default",(function(){return c}))}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,