!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("suggested-name",[],t):"object"==typeof exports?exports["suggested-name"]=t():e["suggested-name"]=t()}("undefined"!=typeof self?self:this,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";function r(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function o(e){var t=Math.floor(e.length/2);return e.sort((function(e,t){return e-t})),e.length%2?e[t]:(e[t-1]+e[t])/2}function u(e,t,n){var r=e.has(t)?e.get(t).concat(n):[n];e.set(t,r)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=new Map,f=new Map;return t.forEach((function(t){e=e.map((function(e){return e.replace(t,"")}))})),e.map((function(e){return e.replace(/ {2,}/g," ")})).forEach((function(e){[].concat(r(new Set(e.split(" ")))).forEach((function(e,t){var r=e.toLowerCase();u(n,r,t+1),u(f,r,e)}))})),[].concat(r(n.entries())).filter((function(t){return f.get(t[0].toLowerCase()).length===e.length})).map((function(e){return[e[0],o(e[1])]})).sort((function(e,t){return e[1]-t[1]})).map((function(e){return(t=f.get(e[0])).sort((function(e,n){return t.filter((function(t){return t===e})).length-t.filter((function(e){return e===n})).length})).pop();var t})).join(" ")},e.exports=t.default}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,